----------
Variables:
----------
Variables are containers for storing data values.
--variable names must start with letters and underscore.

Legal variable names:
--------------------
myvar = "John"
my_var = "John"
_my_var = "John"
myVar = "John"
MYVAR = "John"
myvar2 = "John"

Ex:
---
x = 4       # x is of type int
x = "Sally" # x is now of type str
print(x)

____________________________________________________________________________________________
--------------------
python data types:
--------------------

Text Type:	str
Numeric Types:	int, float, complex
Sequence Types:	list, tuple, range
Mapping Type:	dict
Set Types:	set, frozenset
Boolean Type:	bool
Binary Types:	bytes, bytearray, memoryview
None Type:	NoneType

______________________________________________________________________________________

---------------
Python Numbers:
----------------

There are three numeric types in Python:

int:Int, or integer, is a whole number, positive or negative, without decimals, of unlimited length.

float:Float, or "floating point number" is a number, positive or negative, containing one or more decimals.

complex:Complex numbers are written with a "j" as the imaginary part
__________________________________________________________________________________
----------
casting:
--------
changing from one type to another

ex:
int(2.5)--2

_________________________________________________________
---------
Strings:
--------

Strings in python are surrounded by either single quotation marks, or double quotation marks.

'hello' is the same as "hello".

Example:
print("Hello")
----
b = "Hello, World!"
print(b[2:5])
print(b.upper())
---
a = "Hello"
b = "World"
c = a + b
print(c)
----
Use the format() method to insert numbers into strings:
         -------
age = 36
txt = "My name is John, and I am {}"
print(txt.format(age))
_______________________________________________________________
Boolean:true,false
________________________________________________________________
-------------
operations:
--------------

Arithmetic operators:+,-,*,/,%,**,//
Assignment operators:=,+=,-=,*=,/=/%=,//=,**=,&=,|=,^=,>>=,<<=
Comparison operators:==,!=,>,<,>=,<=
Logical operators:and,or,not
Identity operators:is,is not
Membership operators:in.not in
Bitwise operators:&,|,^,~,<<,>>

______________________________________________________________________

Python Collections (Arrays)
There are four collection data types in the Python programming language:

List is a collection which is ordered and changeable. Allows duplicate members.
Tuple is a collection which is ordered and unchangeable. Allows duplicate members.
Set is a collection which is unordered, unchangeable*, and unindexed. No duplicate members.
Dictionary is a collection which is ordered** and changeable. No duplicate members.
_______________________________________________________________________________

--------
List:
----------

--collection of data types in which items are ordred,changeable and allow duplicates. inex starts from '0'.
Ex:

list = ["abc", 34, True, 40, "male"]

print(list[1])-->34
print(list[-1])-->male
print(list[2:])-->['true',40,'male']
--------
print(list[:3)-->['abc',34,'true']
thislist = ["apple", "banana", "cherry"]
if "apple" in thislist:
  print("Yes, 'apple' is in the fruits list")

---------
Change the second item:

thislist = ["apple", "banana", "cherry"]
thislist[1] = "blackcurrant"
print(thislist)

thislist = ["apple", "banana", "cherry", "orange", "kiwi", "mango"]

thislist[1:3] = ["blackcurrant", "watermelon"]

print(thislist)-->['apple', 'blackcurrant', 'watermelon', 'orange', 'kiwi', 'mango']

_________

1.insert:The insert() method inserts an item at the specified index

thislist = ["apple", "banana", "cherry"]

thislist.insert(2, "watermelon")

print(thislist) -->['apple', 'banana', 'watermelon', 'cherry']

2.append:To add an item to the end of the list, use the append() method

thislist = ["apple", "banana", "cherry"]

thislist.append("orange")

print(thislist)-->['apple', 'banana', 'cherry', 'orange']

3.remove:The remove() method removes the specified item.

thislist = ["apple", "banana", "cherry"]
thislist.remove("banana")
print(thislist)-->['apple', 'cherry']

4.pop:The pop() method removes the specified index.

thislist = ["apple", "banana", "cherry"]
thislist.pop(1)-->if we doesn't mention index it removes last item
print(thislist)-->['apple', 'cherry']

5.del:The del keyword also removes the specified index

thislist = ["apple", "banana", "cherry"]
del thislist[0]
print(thislist)

The del keyword can also delete the list completely.

thislist = ["apple", "banana", "cherry"]
del thislist

6.clear:The clear() method empties the list.The list still remains, but it has no content.

thislist = ["apple", "banana", "cherry"]
thislist.clear()
print(thislist)-->[]

list Loop:

thislist = ["apple", "banana", "cherry"]
i = 0
while i < len(thislist):
  print(thislist[i])
  i = i + 1

****List Comprehension:

List comprehension offers a shorter syntax when we want to create a new list based on the values of an existing list.

syntax:
newlist = [expression for item in iterable if condition == True]

ex:

fruits = ["apple", "banana", "cherry", "kiwi", "mango"]
newlist = []

for x in fruits:
  if "a" in x:
    newlist.append(x)

print(newlist)-->['apple', 'banana', 'mango']

using lc:

fruits = ["apple", "banana", "cherry", "kiwi", "mango"]

newlist = [x for x in fruits if "a" in x]

print(newlist)-->['apple', 'banana', 'mango']

newlist = [x for x in fruits if x != "apple"]-->['banana', 'cherry', 'kiwi', 'mango']

newlist = [x for x in fruits]-->['apple', 'banana', 'cherry', 'kiwi', 'mango']

newlist = [x for x in range(10)]-->[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

newlist = [x for x in range(10) if x < 5]-->[0, 1, 2, 3, 4]

newlist = [x.upper() for x in fruits]-->['APPLE', 'BANANA', 'CHERRY', 'KIWI', 'MANGO']

newlist = ['hello' for x in fruits]-->['hello', 'hello', 'hello', 'hello', 'hello']

newlist = [x if x != "banana" else "orange" for x in fruits]-->['apple', 'orange', 'cherry', 'kiwi', 'mango']

_____________________________________________________________________________________________________________________

Sort:

List objects have a sort() method that will sort the list alphanumerically, ascending, by default

ex:
thislist = [100, 50, 65, 82, 23]
thislist.sort()
print(thislist)-->[23, 50, 65, 82, 100]
---
thislist = ["orange", "mango", "kiwi", "pineapple", "banana"]
thislist.sort(reverse = True)
print(thislist)-->['pineapple', 'orange', 'mango', 'kiwi', 'banana']
------------

thislist = ["banana", "Orange", "Kiwi", "cherry"]

thislist.sort(key = str.lower)

print(thislist)-->['banana', 'cherry', 'Kiwi', 'Orange']

-------
reverse:
--------
thislist = ["banana", "Orange", "Kiwi", "cherry"]
thislist.reverse()
print(thislist)-->['cherry', 'Kiwi', 'Orange', 'banana']

Copy a List:
--------

we cannot copy a list simply by typing list2 = list1, because: list2 will only be a reference to list1,
 and changes made in list1 will automatically also be made in list2.

Ex:
thislist = ["apple", "banana", "cherry"]
mylist = thislist.copy()
print(mylist)--->['apple', 'banana', 'cherry']

-----
thislist = ["apple", "banana", "cherry"]
mylist = list(thislist)
print(mylist)--->['apple', 'banana', 'cherry']

---------
Join list
---------

1.
list1 = ["a", "b", "c"]
list2 = [1, 2, 3]

list3 = list1 + list2
print(list3)--->['a', 'b', 'c', 1, 2, 3]

2.
list1 = ["a", "b" , "c"]
list2 = [1, 2, 3]

for x in list2:
  list1.append(x)

print(list1)--->['a', 'b', 'c', 1, 2, 3]

--------
list methods
-------

Method	Description
append()	Adds an element at the end of the list
clear()	Removes all the elements from the list
copy()	Returns a copy of the list
count()	Returns the number of elements with the specified value
extend()	Add the elements of a list (or any iterable), to the end of the current list
index()	Returns the index of the first element with the specified value
insert()	Adds an element at the specified position
pop()	      Removes the element at the specified position
remove()	Removes the item with the specified value
reverse()	Reverses the order of the list
sort()	Sorts the list
________________________________________________________________________________________________________________

Python Tuples:

---Tuple items are ordered, unchangeable, and allow duplicate values.index start from '0'
EX:

mytuple = ("apple", "banana", "cherry")

To create single item in tuple:comma is neccessqary
-------------------
thistuple = ("apple",)
print(type(thistuple))

#NOT a tuple
thistuple = ("apple")
print(type(thistuple))

1.Access Tuple Items:we can access tuple items by referring to the index number, inside square brackets.

thistuple = ("apple", "banana", "cherry")
print(thistuple[1])
print(thistuple[-1])
print(thistuple[2:])->from 2 to all
print(thistuple[:4])->starting to 3 items
print(thistuple[2:4])
print(thistuple[-4:-1])

2.update tuple:

x = ("apple", "banana", "cherry")
y = list(x)
y[1] = "kiwi"
x = tuple(y)

print(x)-->("apple", "kiwi", "cherry")

3.append:
3.1. Convert into a list: Convert the tuple into a list, add "orange", and convert it back into a tuple

thistuple = ("apple", "banana", "cherry")
y = list(thistuple)
y.append("orange")
thistuple = tuple(y)-->('apple', 'banana', 'cherry', 'orange')

3.2. Add tuple to a tuple:Create a new tuple with the value "orange", and add that tuple.

thistuple = ("apple", "banana", "cherry")
y = ("orange",)
thistuple += y

print(thistuple)--->('apple', 'banana', 'cherry', 'orange')

--------------------
Loop Through a Tuple:
----------------------
we can loop through the tuple items by using a for loop.

Example:

Print all items by referring to their index number

thistuple = ("apple", "banana", "cherry")
for i in range(len(thistuple)):
  print(thistuple[i])

output:
apple
banana
cherry
-------------
Print all items, using a while loop to go through all the index numbers

thistuple = ("apple", "banana", "cherry")
i = 0
while i < len(thistuple):
  print(thistuple[i])
  i = i + 1

output:
apple
banana
cherry
------------------

Join Two Tuples:
To join two or more tuples we can use the + operator

Example:

tuple1 = ("a", "b" , "c")
tuple2 = (1, 2, 3)

tuple3 = tuple1 + tuple2
print(tuple3)--->('a', 'b', 'c', 1, 2, 3)
------------------------------

Multiply the fruits tuple by 2:

fruits = ("apple", "banana", "cherry")
mytuple = fruits * 2

print(mytuple)-->('apple', 'banana', 'cherry', 'apple', 'banana', 'cherry')

-----------------
___________________________________________________________
set:

Sets are used to store multiple items in a single variable.
Set items are unordered, unchangeable, and do not allow duplicate values.

Ex:

thisset = {"apple", "banana", "cherry"}
print(thisset)--->{'cherry', 'banana', 'apple'}

1.add:

thisset = {"apple", "banana", "cherry"}

thisset.add("orange")

print(thisset)-->{'cherry', 'banana', 'orange', 'apple'}

2.update:

Add elements from tropical into thisset

thisset = {"apple", "banana", "cherry"}
tropical = {"pineapple", "mango", "papaya"}

thisset.update(tropical)

print(thisset)--->{'cherry', 'mango', 'papaya', 'banana', 'pineapple', 'apple'}

3.remove:
Remove "banana" by using the remove() method:

thisset = {"apple", "banana", "cherry"}

thisset.remove("banana")

print(thisset)-->{'cherry', 'apple'}

pop,clear,del,loop-->same as list

4.join:we use union
set1 = {"a", "b" , "c"}
set2 = {1, 2, 3}

set3 = set1.union(set2)
print(set3)-->{1, 2, 3, 'a', 'b', 'c'}
-------------------
Set Methods
-------------------

Method			Description
add()				Adds an element to the set
clear()			Removes all the elements from the set
copy()			Returns a copy of the set
difference()		Returns a set containing the difference between two or more sets
difference_update()	Removes the items in this set that are also included in another, specified set
discard()			Remove the specified item
intersection()		Returns a set, that is the intersection of two other sets
intersection_update()	Removes the items in this set that are not present in other, specified set(s)
isdisjoint()		Returns whether two sets have a intersection or not
issubset()			Returns whether another set contains this set or not
issuperset()		Returns whether this set contains another set or not
pop()				Removes an element from the set
remove()			Removes the specified element
symmetric_difference()	Returns a set with the symmetric differences of two sets
symmetric_difference_update()	inserts the symmetric differences from this set and another
union()			Return a set containing the union of sets
update()			Update the set with the union of this set and others

___________________________________________________________________

-----------------------
python dictionaries:

----------------------
Dictionaries are used to store data values in key:value pairs.

A dictionary is a collection which is ordered*, changeable and do not allow duplicates.

Ex:

thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
print(thisdict)--->{'brand': 'Ford', 'model': 'Mustang', 'year': 1964}
-----
11111.access item:

1.print(thisdict["brand"])--->Ford

2.print(thisdict.get("brand"))-->Ford
print(thisdict.keys())-->dict_keys(['brand', 'model', 'year'])
----
dict() Constructor:
            It is also possible to use the dict() constructor to make a dictionary.

Ex:

thisdict = dict(name = "John", age = 36, country = "Norway")
print(thisdict)--->{'name': 'John', 'age': 36, 'country': 'Norway'}

------
-->adding new item:

car = {
"brand": "Ford",
"model": "Mustang",
"year": 1964
}

x = car.keys()

print(x) #before the change-->dict_keys(['brand', 'model', 'year'])

car["color"] = "white"

print(x) #after the change-->dict_keys(['brand', 'model', 'year', 'color'])

-------

-->Make a change in the original dictionary:

car = {
"brand": "Ford",
"model": "Mustang",
"year": 1964
}

x = car.values()

print(x) #before the change-->dict_values(['Ford', 'Mustang', 1964])

car["year"] = 2020

print(x) #after the change-->dict_values(['Ford', 'Mustang', 2020])

--------
Get Items:
The items() method will return each item in a dictionary, as tuples in a list.

Ex:
x = thisdict.items()

------
Check if Key Exists:

Ex:

thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
if "model" in thisdict:
  print("Yes, 'model' is one of the keys in the thisdict dictionary")


2222.Change value:   thisdict["year"] = 2018
     update value:   thisdict.update({"year": 2020})

3333.pop:The popitem() method removes the last inserted item 

ex:

thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
thisdict.popitem()
print(thisdict)-->{'brand': 'Ford', 'model': 'Mustang'}

4444.del:The del keyword removes the item with the specified key name and can
also delete complete dictionary

ex:

del thisdict["model"]
print(thisdict)-->{'brand': 'Ford','year': 1964}
--
del thisdict-->delete complete dict

5555> clear:clear() method empties the dictionary

Ex:

thisdict =	{
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
thisdict.clear()
print(thisdict)-->{}

-----
loop:

ex
for x in thisdict:
  print(x)

o/p:
Ford
Mustang
1964

for x in thisdict:
  print(thisdict[x])

ö/p:
Ford
Mustang
1964

for x, y in thisdict.items():
  print(x, y)
o/p:

brand Ford
model Mustang
year 1964

6666:copy dict:

mydict = thisdict.copy()
print(mydict)
--
mydict = dict(thisdict)
print(mydict)

7777.nested dict:


myfamily = {
  "child1" : {
    "name" : "Emil",
    "year" : 2004
  },
  "child2" : {
    "name" : "Tobias",
    "year" : 2007
  },
  "child3" : {
    "name" : "Linus",
    "year" : 2011
  }
}

print(myfamily)-->{'child1': {'name': 'Emil', 'year': 2004}, 'child2': {'name': 'Tobias', 'year': 2007}, 'child3': {'name': 'Linus', 'year': 2011}}

another way:
child1 = {
  "name" : "Emil",
  "year" : 2004
}
child2 = {
  "name" : "Tobias",
  "year" : 2007
}
child3 = {
  "name" : "Linus",
  "year" : 2011
}

myfamily = {
  "child1" : child1,
  "child2" : child2,
  "child3" : child3
}

print(myfamily)-->{'child1': {'name': 'Emil', 'year': 2004}, 'child2': {'name': 'Tobias', 'year': 2007}, 'child3': {'name': 'Linus', 'year': 2011}}
---
dictionary methods:
---

clear()		Removes all the elements from the dictionary
copy()		Returns a copy of the dictionary
fromkeys()		Returns a dictionary with the specified keys and value
get()			Returns the value of the specified key
items()		Returns a list containing a tuple for each key value pair
keys()		Returns a list containing the dictionary's keys
pop()			Removes the element with the specified key
popitem()		Removes the last inserted key-value pair
setdefault()	Returns the value of the specified key. If the key does not exist: insert the key, with the specified value
update()		Updates the dictionary with the specified key-value pairs
values()		Returns a list of all the values in the dictionary

__________________________________________________________________________________

------------
if statement:(if,if else, if else if)
--------------

if condition:
	print(stmt1)
elif condition:
	print(stmt2)
else:
	print(none)

short hand(if,if else,if else with condition):

if a > b: print("a is greater than b")

print("A") if a > b else print("B")

print("A") if a > b else print("=") if a == b else print("B")

pass::::
if statements cannot be empty, but if you for some reason have an if statement with no content, put in the pass statement to avoid getting an error.

ex:
if b > a:
  pass

_______________________________________________________________________________________________

---------------
while loop:

-------------------

With the while loop we can execute a set of statements as long as a condition is true.

ex:
i = 1
while i < 6:
  print(i)             #With the break statement we can stop the loop even if the while condition is true
  if i == 3:
    break
  i += 1

ouput:
1
2
3
-----
i = 0
while i < 6:
  i += 1
  if i == 3:          #With the continue statement we can stop the current iteration, and continue with the next
    continue
  print(i)

output:
1
2
4
5
6

________________________________________________________________________________

----
for loop
-----------
A for loop is used for iterating over a sequence (that is either a list, a tuple, a dictionary, a set, or a string).

fruits = ["apple", "banana", "cherry"]
for x in fruits:
  print(x)
  if x == "banana":
    break

output:

apple
banana

____________________________________________________________________________________________

-------------------
Creating a Function:
-------------------
In Python a function is defined using the def keyword

Ex:

def my_function():
  print("Hello from a function")

-----
Calling a Function: To call a function, use the function name followed by parenthesis.

ex:
def my_function():
  print("Hello from a function")

my_function()

-----
Arguments:

Information can be passed into functions as arguments.Arguments are specified after the function name, 
inside the parentheses. You can add as many arguments as you want,
 just separate them with a comma.

Ex:

def my_function(fname):
  print(fname + " Refsnes")

my_function("Emil")
my_function("Tobias")
my_function("Linus")
---

def my_function(fname, lname):
  print(fname + " " + lname)

my_function("Emil", "Refsnes")-->Emil Refsnes
-----

Arbitrary Arguments, *args:

If you do not know how many arguments that will be passed into your function, 
add a * before the parameter name in the function definition.

Ex:

def my_function(*kids):
  print("The youngest child is " + kids[2])

my_function("Emil", "Tobias", "Linus")-->The youngest child is Linus

----

def tri_recursion(k):
  if(k > 0):
    result = k + tri_recursion(k - 1)
    print(result)
  else:
    result = 0
  return result

print("\n\nRecursion Example Results")
tri_recursion(6)

output:
Recursion Example Results
1
3
6
10
15
21

______________________________________________________________________________________
-----
Python Lambda:
--------------

A lambda function can take any number of arguments, but can only have one expression.

ex:
x = lambda a : a + 10
print(x(5))-->15
---
x = lambda a, b, c : a + b + c
print(x(5, 6, 2))-->13
----
def myfunc(n):
  return lambda a : a * n

mydoubler = myfunc(2)

print(mydoubler(11))-->22
------
_________________________________________________________________________
---------------------
array method
--------------------

append()	Adds an element at the end of the list
clear()	Removes all the elements from the list
copy()	Returns a copy of the list
count()	Returns the number of elements with the specified value
extend()	Add the elements of a list (or any iterable), to the end of the current list
index()	Returns the index of the first element with the specified value
insert()	Adds an element at the specified position
pop()		Removes the element at the specified position
remove()	Removes the first item with the specified value
reverse()	Reverses the order of the list
sort()	Sorts the list


_______________________________________________________________________________

